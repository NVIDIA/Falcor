/***************************************************************************
# Copyright (c) 2015, NVIDIA CORPORATION. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
***************************************************************************/

// Spire-ized `FullScreenPass.{vs,gs}.hlsl`

// struct VsOut
// {
//     float2 texC       : TEXCOORD;
//     float4 posH       : SV_POSITION;
// #ifdef _SINGLE_PASS_STEREO
//     float4 rightPosH  : NV_X_RIGHT;
//     uint4 viewportMask : NV_VIEWPORT_MASK;
//     uint renderTargetIndex : SV_RenderTargetArrayIndex;
// #endif
// };
// 
// VsOut main(float4 posS : POSITION, float2 texC : TEXCOORD)
// {
//     VsOut vOut;
//     vOut.texC = texC;
// 	vOut.posH = posS;
// #ifdef _SINGLE_PASS_STEREO
//     vOut.rightPosH = posS;
//     vOut.viewportMask = 0x00000001;
//     vOut.renderTargetIndex = 0;
// #endif
//     return vOut;
// }

module FullScreenPass
{
	@MeshVertex float4 POSITION;	public float4 posS = POSITION;
	@MeshVertex float2 TEXCOORD;	public float2 texC = TEXCOORD;

	public vec4 projCoord = posS;
}



//struct VsOut
//{
//    float2 texC       : TEXCOORD;
//    float4 posH       : SV_POSITION;
//};
//
//struct GsOut
//{
//    float2 texC : TEXCOORD;
//    float4 posH : SV_POSITION;
//    uint rtIndex : SV_RenderTargetArrayIndex;
//};
//
//[maxvertexcount(3 * _OUTPUT_PRIM_COUNT)]
//void main(triangle VsOut input[3], inout TriangleStream<GsOut> outStream)
//{
//    GsOut output;
//    uint mask = _VIEWPORT_MASK;
//
//    while(mask != 0)
//    {
//        uint layer = firstbitlow(mask);
//        
//        for(int i = 0 ; i < 3 ; i++)
//        {
//            output.rtIndex = layer;
//            output.posH = input[i].posH;
//            output.texC = input[i].texC;
//            outStream.Append(output);
//        }
//        outStream.RestartStrip();
//        mask &= ~(1 << layer);
//    }
//}

