pipeline StandardPipeline
{
    [Pinned]
    input world MeshVertex;

    world CoarseVertex;// : "glsl(vertex:projCoord)" using projCoord export standardExport;
    world Fragment;// : "glsl" export fragmentExport;
    
    require @CoarseVertex vec4 projCoord; 
        
    [VertexInput]
    extern @CoarseVertex MeshVertex vertAttribIn;
    import(MeshVertex->CoarseVertex) vertexImport()
    {
        return project(vertAttribIn);
    }
    
    extern @Fragment CoarseVertex CoarseVertexIn;
    import(CoarseVertex->Fragment) standardImport<T>()
        require trait IsTriviallyPassable(T)
    {
        return project(CoarseVertexIn);
    }
    
    stage vs : VertexShader
    {
        World: CoarseVertex;
        Position: projCoord;
    }
    
    stage fs : FragmentShader
    {
        World: Fragment;
    }
}

template shader ModelViewerShader() targets StandardPipeline
{
	public @MeshVertex vec3 vertPos;

	public vec4 projCoord = vec4(vertPos, 1.0);
	
    public out @Fragment vec4 outputColor = vec4(1.0, 0.0, 0.0, 1.0);
}