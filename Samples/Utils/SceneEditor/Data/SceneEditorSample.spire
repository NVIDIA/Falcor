/***************************************************************************
# Copyright (c) 2015, NVIDIA CORPORATION. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
***************************************************************************/

module SceneEditorSampleShaderParamsT
{
// #foreach p in _LIGHT_SOURCES
//     LightData $(p);
// #endforeach
// 
//     float3 gAmbient;

	param LightData[16] gLights;

	param float3 gAmbient;
	param int gLightCount;
}


template shader SceneEditorSampleShader(
	PerFrameCB : SceneEditorSampleShaderParamsT,
	InternalPerFrameCB : InternalPerFrameCB_T,
	InternalPerMeshCB : InternalPerMeshCB_T,
	M : Material,
	VertexAttribs : IVertexAttribs,  // hack: put components that does not generate a uniform buffer last to avoid incomplete pso
	) targets StandardPipeline
{
	using PerFrameCB;

	using InternalPerFrameCB;
	using InternalPerMeshCB;
	using VertexAttribs;


	using DefaultVertexShader;

	using material = M();

    public out @Fragment vec4 outputColor
	{
		ShadingAttribs shAttr;
		material.prepareShadingAttribs(posW, /*gCam.*/position, normal, bitangent, vertUV, 0.0f, shAttr);
		
		ShadingOutput result;
		InitializeShadingOutput(result);

// #foreach p in _LIGHT_SOURCES
//     evalMaterial(shAttr, $(p), result, $(_valIndex) == 0);
// #endforeach
		for(int ii = 0; ii < gLightCount; ++ii)
		{
			material.evalMaterial(shAttr, gLights[ii], result);
		}

		float4 finalColor = float4(0.0f);
		finalColor = vec4(result.finalValue, 1.f);

		// add ambient
//		finalColor.rgb += gAmbient * getDiffuseColor(shAttr).rgb;
		return finalColor;
	}
}
